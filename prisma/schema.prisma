// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  confirmation  Confirmation?
  registration  Registration?
  ticket        Ticket?
  vote          Vote?
  Feedback      Feedback?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Registration {
  id                 String   @id @default(cuid())
  name               String
  phone              String
  age                Int
  address            String
  job                String
  instance           String
  faculty            String?
  linkedin           String?
  instagram          String?
  allergy            String?
  q1                 String?
  q2                 String
  profile            String
  q3                 String
  q4                 String
  participationscale Int
  q5                 String?
  q6                 String?
  userId             String   @unique
  registeredAt       DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Confirmation {
  id          String   @id @default(cuid())
  attendance  Boolean?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket      Ticket?
  confirmedAt DateTime @default(now())
}

model Ticket {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  madeAt         DateTime     @default(now())
  confirmationId String       @unique
  confirmation   Confirmation @relation(fields: [confirmationId], references: [id], onDelete: Cascade)
  checkIn        CheckIn?
}

model Vote {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidateId     String
  chosencandidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
}

model Candidate {
  id    String @id @default(cuid())
  name  String
  score Int
  votes Vote[]
}

model Feedback {
  id         String   @id @default(cuid())
  q1         Int
  q2         String
  q3         String
  q4         String
  q5         String
  q6         String
  q7         String[]
  feedbackAt DateTime @default(now())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CheckIn {
  id         String   @id @default(cuid())
  ticketId   String   @unique
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  verifiedBy String
  createdAt  DateTime @default(now())
}
